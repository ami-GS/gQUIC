package quic

type MY_ERROR uint16

const (
	CONNECTION_NOT_FOUND MY_ERROR = iota
	FAIL_TO_SET_CONNECTION_ID
)

func (e MY_ERROR) Error() string {
	return []string{
		"CONNECTION_NOT_FOUND",
		"FAIL_TO_SET_CONNECTION_ID",
	}[e]
}

// TODO: The official errors shuold be in other file and package?
type QUIC_OFFICIAL_ERROR uint16

const (
	QUIC_NO_ERROR QUIC_OFFICIAL_ERROR = iota
	QUIC_STREAM_DATA_AFTER_TERMINATION
	QUIC_SERVER_ERROR_PROCESSING_STREAM
	QUIC_MULTIPLE_TERMINATION_OFFSETS
	QUIC_BAD_APPLICATION_PAYLOAD
	QUIC_INVALID_PACKET_HEADER
	QUIC_INVALID_FRAME_DATA
	QUIC_INVALID_FEC_DATA
	QUIC_INVALID_RST_STREAM_DATA
	QUIC_INVALID_CONNECTION_CLOSE_DATA
	QUIC_INVALID_ACK_DATA
	QUIC_DECRYPTION_FAILURE
	QUIC_ENCRYPTION_FAILURE
	QUIC_PACKET_TOO_LARGE
	QUIC_PACKET_FOR_NONEXISTENT_STREAM
	QUIC_CLIENT_GOING_AWAY
	QUIC_SERVER_GOING_AWAY
	QUIC_INVALID_STREAM_ID
	QUIC_TOO_MANY_OPEN_STREAMS
	QUIC_CONNECTION_TIMED_OUT
	QUIC_CRYPTO_TAGS_OUT_OF_ORDER
	QUIC_CRYPTO_TOO_MANY_ENTRIES
	QUIC_CRYPTO_INVALID_VALUE_LENGTH
	QUIC_CRYPTO_MESSAGE_AFTER_HANDSHAKE_COMPLETE
	QUIC_INVALID_CRYPTO_MESSAGE_TYPE
	QUIC_SEQUENCE_NUMBER_LIMIT_REACHED
)

func (e QUIC_OFFICIAL_ERROR) Error() string {
	return []string{
		"QUIC_NO_ERROR",
		"QUIC_STREAM_DATA_AFTER_TERMINATION",
		"QUIC_SERVER_ERROR_PROCESSING_STREAM",
		"QUIC_MULTIPLE_TERMINATION_OFFSETS",
		"QUIC_BAD_APPLICATION_PAYLOAD",
		"QUIC_INVALID_PACKET_HEADER",
		"QUIC_INVALID_FRAME_DATA",
		"QUIC_INVALID_FEC_DATA",
		"QUIC_INVALID_RST_STREAM_DATA",
		"QUIC_INVALID_CONNECTION_CLOSE_DATA",
		"QUIC_INVALID_ACK_DATA",
		"QUIC_DECRYPTION_FAILURE",
		"QUIC_ENCRYPTION_FAILURE",
		"QUIC_PACKET_TOO_LARGE",
		"QUIC_PACKET_FOR_NONEXISTENT_STREAM",
		"QUIC_CLIENT_GOING_AWAY",
		"QUIC_SERVER_GOING_AWAY",
		"QUIC_INVALID_STREAM_ID",
		"QUIC_TOO_MANY_OPEN_STREAMS",
		"QUIC_CONNECTION_TIMED_OUT",
		"QUIC_CRYPTO_TAGS_OUT_OF_ORDER",
		"QUIC_CRYPTO_TOO_MANY_ENTRIES",
		"QUIC_CRYPTO_INVALID_VALUE_LENGTH",
		"QUIC_CRYPTO_MESSAGE_AFTER_HANDSHAKE_COMPLETE",
		"QUIC_INVALID_CRYPTO_MESSAGE_TYPE",
		"QUIC_SEQUENCE_NUMBER_LIMIT_REACHED",
	}[e]
}
